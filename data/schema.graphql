type Concept implements Node {
  id: ID!
  name: String
  summary: String
  summarySource: String
  conceptsCount: Int
  container: Concept
  path: [Concept]
  concepts: [Concept]
  reqs: [Concept]
  explanationsCount: Int
  explanations(after: String, first: Int, before: String, last: Int): ExplanationConnection
  mastered: Boolean
  learnPath(includeContained: Boolean, mastered: Boolean): [Concept]
}

input CreateConceptInput {
  name: String
  summary: String
  summarySource: String
  container: ID
  reqs: [ID]
  clientMutationId: String!
}

type CreateConceptPayload {
  conceptID: ID
  clientMutationId: String!
}

input CreateExplanationInput {
  conceptID: ID!
  type: String
  content: String
  clientMutationId: String!
}

type CreateExplanationPayload {
  success: Boolean
  clientMutationId: String!
}

input DeleteConceptInput {
  conceptID: ID!
  clientMutationId: String!
}

type DeleteConceptPayload {
  success: Boolean
  clientMutationId: String!
}

input DeleteExplanationInput {
  explanationID: ID!
  clientMutationId: String!
}

type DeleteExplanationPayload {
  success: Boolean
  clientMutationId: String!
}

type Explanation {
  id: ID!
  type: String
  content: String
  votes: Int
  hasUpvoted: Boolean
  hasDownvoted: Boolean
  author: User
}

type ExplanationConnection {
  pageInfo: PageInfo!
  edges: [ExplanationEdge]
}

type ExplanationEdge {
  node: Explanation
  cursor: String!
}

input LoginInput {
  name: String
  password: String
  clientMutationId: String!
}

type LoginPayload {
  success: Boolean
  clientMutationId: String!
}

input LogoutInput {
  clientMutationId: String!
}

type LogoutPayload {
  success: Boolean
  clientMutationId: String!
}

input MasterConceptInput {
  conceptIDs: [ID]
  mastered: Boolean!
  clientMutationId: String!
}

type MasterConceptPayload {
  concepts: [Concept]
  user: User
  clientMutationId: String!
}

type Mutation {
  register(input: RegisterInput!): RegisterPayload
  login(input: LoginInput!): LoginPayload
  logout(input: LogoutInput!): LogoutPayload
  createConcept(input: CreateConceptInput!): CreateConceptPayload
  updateConcept(input: UpdateConceptInput!): UpdateConceptPayload
  deleteConcept(input: DeleteConceptInput!): DeleteConceptPayload
  masterConcept(input: MasterConceptInput!): MasterConceptPayload
  createExplanation(input: CreateExplanationInput!): CreateExplanationPayload
  updateExplanation(input: UpdateExplanationInput!): UpdateExplanationPayload
  deleteExplanation(input: DeleteExplanationInput!): DeleteExplanationPayload
  voteExplanation(input: VoteExplanationInput!): VoteExplanationPayload
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

input RegisterInput {
  name: String
  password: String
  clientMutationId: String!
}

type RegisterPayload {
  success: Boolean
  clientMutationId: String!
}

type RootQuery {
  viewer: Viewer
  node(id: ID!): Node
}

input UpdateConceptInput {
  id: ID
  name: String
  summary: String
  summarySource: String
  container: ID
  reqs: [ID]
  clientMutationId: String!
}

type UpdateConceptPayload {
  success: Boolean
  clientMutationId: String!
}

input UpdateExplanationInput {
  explanationID: ID!
  content: String
  clientMutationId: String!
}

type UpdateExplanationPayload {
  explanation: Explanation
  clientMutationId: String!
}

type User implements Node {
  id: ID!
  name: String
  isAdmin: Boolean
  isGuest: Boolean
  masteredConceptsCount: Int
}

type Viewer {
  user: User
  userExists(name: String!): Boolean
  concept(id: String, fetchContainerIfEmpty: Boolean, returnEmpty: Boolean): Concept
  concepts(query: String, limit: Int, exclude: [String]): [Concept]
}

input VoteExplanationInput {
  explanationID: ID!
  voteType: voteType
  clientMutationId: String!
}

type VoteExplanationPayload {
  explanation: Explanation!
  clientMutationId: String!
}

enum voteType {
  UP
  DOWN
}
