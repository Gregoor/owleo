type Concept implements Node {
  id: ID!
  name: String
  path: [Concept]
  summary: String
  conceptsCount: Int
  container: Concept
  reqs: [Concept]
  concepts: [Concept]
  explanations: [Explanation]
}

input CreateConceptInput {
  name: String
  summary: String
  summarySource: String
  container: ID
  reqs: [ID]
  clientMutationId: String!
}

type CreateConceptPayload {
  conceptId: ID
  clientMutationId: String!
}

input DeleteConceptInput {
  conceptId: ID
  clientMutationId: String!
}

type DeleteConceptPayload {
  success: Boolean
  clientMutationId: String!
}

type Explanation {
  id: ID!
  content: String
  votes: Int
  author: User
}

type IdentityEdge {
  node: User
  cursor: String!
}

input LoginInput {
  name: String
  password: String
  clientMutationId: String!
}

type LoginPayload {
  identityEdge: IdentityEdge
  viewer: Viewer
  clientMutationId: String!
}

type Mutation {
  createConcept(input: CreateConceptInput!): CreateConceptPayload
  deleteConcept(input: DeleteConceptInput!): DeleteConceptPayload
  login(input: LoginInput!): LoginPayload
}

interface Node {
  id: ID!
}

type RootQuery {
  viewer: Viewer
  node(id: ID!): Node
}

type User implements Node {
  id: ID!
  name: String
}

type Viewer {
  identities: [User]
  conceptRoot: Concept
  concept(path: String, id: String): Concept
  concepts(query: String, limit: Int, exclude: [String]): [Concept]
}
